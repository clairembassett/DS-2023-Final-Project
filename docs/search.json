[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Position To Player Load",
    "section": "",
    "text": "1.1 Prepared For\nOur report was made for the UVA Men’s basketball recruiting team and their athletic trainers.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Report</span>"
    ]
  },
  {
    "objectID": "index.html#problem-statement",
    "href": "index.html#problem-statement",
    "title": "Position To Player Load",
    "section": "1.2 Problem Statement",
    "text": "1.2 Problem Statement\nInjuries are a persistent challenge for basketball teams, particularly as the season progresses and physical demands intensify. Once a player is injured, they can no longer contribute to games or continue training. Which is disrupting to the team performance and the individual development of the player.\nOur report uses Catapult performance tracking data from the 2022–2023 season to evaluate how different positions contribute to Total Player Load, a key indicator of physical exertion. While Player Load does not directly measure injuries, it reflects the volume of movement and intensity. Both of these are linked to injury-prone actions like quick direction changes, sprints, and jumps.\nResearch suggests that guards are disproportionately affected by injuries, often due to their explosiveness and agility demands. Our analysis investigates the validity of this claim and offers insights for the UVA team on their recruitment and training plans.\nQuestion: How does a player’s position dictate their Player Load and therefore their likelihood of injury?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Report</span>"
    ]
  },
  {
    "objectID": "index.html#analysis",
    "href": "index.html#analysis",
    "title": "Position To Player Load",
    "section": "1.3 Analysis",
    "text": "1.3 Analysis\nTo test the hypothesis that guards face the highest physical burden, we averaged the Total Player Load for each Position in Season 1. Two donut charts for 2 periods visualized the distribution of Total Player Load across positions.\n\n\n\nSource: Season 1 dataset, 2 donut charts\n\n\nGuards accounted for approximately 45% of Total Player Load. Which is about 10% more than forwards, and significantly more than centers. This high load remained consistent across different time periods in the season, suggesting that guards are consistently tasked with more physically demanding roles.\nTaking a deeper dive into guard performance, we decided we needed to look at Total Player Load’s nuances. To better understand what drives high Player Loads, we analyzed Player H— a guard who logged the highest Total Player Load across both seasons. Using a stacked area chart, we decomposed the athlete’s Total Player Load into three components: total accelerations/deceleration, total jump counts, and explosive actions. To make these metrics comparable, we took proportions of each of Total Player Load and plotted them cumulatively across game Dates during Season 1.\n\n\n\nSource: Season 1 dataset, stacked area graph with NON-overlapping areas\n\n\nThe majority of Player H’s load came from Total accelerations and decelerations, followed closely by explosive actions. These actions are known to strain the knees and ankles. These types of efforts, common among guards, are directly tied to movements associated with non-contact basketball injuries.\nWe then created a line graph comparing cumulative Total Player Load by Position throughout Season 1. Player H’s line was bolded for emphasis.\n\n\n\nSource: Season 1 dataset, (multiple) line graph\n\n\nAmong the top four players with the highest cumulative Total Player Loads, three were guards. This reinforces the pattern that guards consistently bear the heaviest physical load, not just in isolated games but throughout the entire season.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Report</span>"
    ]
  },
  {
    "objectID": "index.html#conclusion",
    "href": "index.html#conclusion",
    "title": "Position To Player Load",
    "section": "1.4 Conclusion",
    "text": "1.4 Conclusion\nOur analysis confirms that guards carry a disproportionately higher Total Player Load relative to that of other positions, particularly through explosive actions and frequent jumping. Both of which are known contributors to common basketball injuries.\nThese insights have meaningful implications for recruitment, training, and injury prevention:\n\nRecruiting Takeaway: Consider durability and movement efficiency in guards as key scouting attributes. Also to recruit more guards instead of centers which are becoming less used in current basketball gameplay.\nTraining Recommendation: Implement injury prevention strategies targeting the lower body, especially for guards. Such as strength training, mobility work, and controlled agility drills.\nIn-Game Strategy: Monitor Player Load throughout the season to adjust minutes and reduce overexertion, particularly during periods of high game frequency.\n\nBy taking a data-driven approach to conditioning and game planning, UVA can better preserve player health and maintain performance consistency.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Report</span>"
    ]
  },
  {
    "objectID": "datacleaning.html",
    "href": "datacleaning.html",
    "title": "2  Data Cleaning",
    "section": "",
    "text": "2.1 Loading the Dataset\n# importing libraries\nimport pandas as pd \n\n# loading the dataset (not available on public Github repo)\ndf1 = pd.read_csv(\"./season1.csv\")\ndf2 = pd.read_csv(\"./season2.csv\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "datacleaning.html#deleting-unused-columns",
    "href": "datacleaning.html#deleting-unused-columns",
    "title": "2  Data Cleaning",
    "section": "2.2 Deleting Unused Columns",
    "text": "2.2 Deleting Unused Columns\n\ndf1 = df1[['Date', 'About', 'Position', 'Period', 'Total Player Load', 'Player Load Per Minute', 'IMA Accel Total', \n           'IMA Decel Total', 'IMA Jump Count Low Band', 'IMA Jump Count Med Band', 'IMA Jump Count High Band', 'Explosive Efforts']]\n\ndf2 = df2[['Date', 'About', 'Position', 'Period', 'Total Player Load', 'Player Load Per Minute', 'IMA Accel Total', \n           'IMA Decel Total', 'IMA Jump Count Low Band', 'IMA Jump Count Med Band', 'IMA Jump Count High Band', 'Explosive Efforts']]\n\n# make sure columns dropped properly by listing out columns to each season dataframe\nprint(\"df1:\", df1.columns)\nprint(\"df2:\", df2.columns)\n\ndf1: Index(['Date', 'About', 'Position', 'Period', 'Total Player Load',\n       'Player Load Per Minute', 'IMA Accel Total', 'IMA Decel Total',\n       'IMA Jump Count Low Band', 'IMA Jump Count Med Band',\n       'IMA Jump Count High Band', 'Explosive Efforts'],\n      dtype='object')\ndf2: Index(['Date', 'About', 'Position', 'Period', 'Total Player Load',\n       'Player Load Per Minute', 'IMA Accel Total', 'IMA Decel Total',\n       'IMA Jump Count Low Band', 'IMA Jump Count Med Band',\n       'IMA Jump Count High Band', 'Explosive Efforts'],\n      dtype='object')",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "datacleaning.html#check-for-missing-data",
    "href": "datacleaning.html#check-for-missing-data",
    "title": "2  Data Cleaning",
    "section": "2.3 Check for Missing Data",
    "text": "2.3 Check for Missing Data\n\n# looking for missing values in the selected columns \n# loop through each column and print the percentage of missing values of each column\nprint(\"Season1 Missings:\")\nfor col in df1.columns:\n    total = len(df1)\n    missing = df1[col].isnull().sum()\n    percent = (missing / total) * 100\n    print(col , \":\", round(percent, 2))\n\nprint(\"\\nSeason2 Missings:\")\nfor col in df2.columns:\n    total = len(df2)\n    missing = df2[col].isnull().sum()\n    percent = (missing / total) * 100\n    print(col , \":\", round(percent, 2))\n\nSeason1 Missings:\nDate : 0.0\nAbout : 0.0\nPosition : 0.0\nPeriod : 0.0\nTotal Player Load : 0.0\nPlayer Load Per Minute : 0.0\nIMA Accel Total : 0.0\nIMA Decel Total : 0.0\nIMA Jump Count Low Band : 0.0\nIMA Jump Count Med Band : 0.0\nIMA Jump Count High Band : 0.0\nExplosive Efforts : 0.0\n\nSeason2 Missings:\nDate : 0.0\nAbout : 0.0\nPosition : 0.0\nPeriod : 0.0\nTotal Player Load : 0.0\nPlayer Load Per Minute : 0.0\nIMA Accel Total : 0.0\nIMA Decel Total : 0.0\nIMA Jump Count Low Band : 0.0\nIMA Jump Count Med Band : 0.0\nIMA Jump Count High Band : 0.0\nExplosive Efforts : 0.0",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "datacleaning.html#check-for-duplicatedcorrect-data-types-in-df1",
    "href": "datacleaning.html#check-for-duplicatedcorrect-data-types-in-df1",
    "title": "2  Data Cleaning",
    "section": "2.4 Check for Duplicated/Correct Data Types in df1",
    "text": "2.4 Check for Duplicated/Correct Data Types in df1\n\n#Following 3 lines commented out due to having similar purpose as the last line - uncomment out if wish to duplicate the cleaning:\n# using .unique() to check for duplicates because of spaces/wrong data types/etc\n# print(df1['Date'].unique() , \"\\n\", df1['Date'].dtype) # -&gt; all objects, no duplicates\n# print(df1['About'].unique() , \"\\n\", df1['About'].dtype) # -&gt; all objects, no duplicates\nprint(df1['Position'].unique() , \"\\n\", df1['Position'].dtype) # -&gt; all objects, no duplicates\n\n['Guard' 'Forward' 'Center'] \n object\n\n\nWe see that there is one player whose name is not in the correct format of ‘Athlete ..’, so we will replace his name with ‘Athlete K’ per instructions. This is under the About column.\n\ndf1['About'] = df1['About'].replace('Ben Vander Plas', 'Athlete K')\ndf1['About'].unique()\n\narray(['Athlete I', 'Athlete G', 'Athlete A', 'Athlete F', 'Athlete H',\n       'Athlete B', 'Athlete K', 'Athlete M', 'Athlete C', 'Athlete D',\n       'Athlete L', 'Athlete J', 'Athlete E'], dtype=object)\n\n\nWe only want to look at data for game-related observations, so we are only keeping rows where “Period 1” and “Period 2” are the Period type.\n\n# Period 1, Period 2\nkrows = []\n\nfor i in range(len(df1)):\n    value = str(df1.loc[i, 'Period'])\n    if 'Period 1' in value or 'Period 2' in value:\n        krows.append(i)\ndf1 = df1.loc[krows].reset_index(drop=True)\n\nBe more specific when dropping rows now, since some of the rows kept did include “Period 1” in Period, but were actually a Scrimmage in “Period 1”, not from a real game. This is specifically for Season 1 and not Season 2 as Season 2 doesn’t have “scrimmage” included in Period.\n\n# delete rows with \"Scrimmage\"\ndrows = []\n\nfor i in range(len(df1)):\n    value = str(df1.loc[i, 'Period'])\n    if 'Scrimmage' in value:\n        drows.append(i)\n    if 'Drill' in value:\n        drows.append(i)\n\ndf1.drop(index=drows, inplace=True)\ndf1.reset_index(drop=True, inplace=True)\n\ndf1['Period'].value_counts()\n\nPeriod\n3. Period 2    139\n3. Period 1    139\n2. Period 1    136\n4. Period 2    130\n2. Period 2      4\nName: count, dtype: int64\n\n\nTo finish cleaning the Period column, we are going to make sure that there are no duplicates in this column. Since some of these duplicates included a period number in the Period value, we will remove them to make them all merge into only two unique values.\n\n# Period 1 = 1, Period 2 = 2\n\n# cleaning Period 1\nif \"2. Period 1\" in df1['Period'].values:\n    df1['Period'] = df1['Period'].replace(\"2. Period 1\", \"Period 1\")\nif \"3. Period 1\" in df1['Period'].values:\n    df1['Period'] = df1['Period'].replace(\"3. Period 1\", \"Period 1\")\n\n# cleaning Period 2\nif \"2. Period 2\" in df1['Period'].values:\n    df1['Period'] = df1['Period'].replace(\"2. Period 2\", \"Period 2\")\nif \"4. Period 2\" in df1['Period'].values:\n    df1['Period'] = df1['Period'].replace(\"4. Period 2\", \"Period 2\")\nif \"3. Period 2\" in df1['Period'].values:\n    df1['Period'] = df1['Period'].replace(\"3. Period 2\", \"Period 2\")\n\nprint(df1['Period'].value_counts())\n\nPeriod\nPeriod 1    275\nPeriod 2    273\nName: count, dtype: int64\n\n\nContinuing to check the columns:\n\n#One more, we have commented out code due to an overwhelming amount of print statements of code that has a similar purpose to the last line. Uncomment the ones below if you wish to replicate exactly what we did in cleaning data:\n# print(df1['Total Player Load'].value_counts(), \"\\n\", df1['Total Player Load'].dtype) # -&gt; all floats\n# print(df1['Player Load Per Minute'].unique(), \"\\n\", df1['Player Load Per Minute'].dtype) # -&gt; all floats w/ one decimal place\n# print(df1['IMA Accel Total'].unique(), \"\\n\", df1['IMA Accel Total'].dtype) # -&gt; all ints, no duplicates\n# print(df1['IMA Decel Total'].unique(), \"\\n\", df1['IMA Decel Total'].dtype) # -&gt; all ints, no duplicates \n# print(df1['IMA Jump Count Low Band'].unique(), \"\\n\", df1['IMA Jump Count Low Band'].dtype) # -&gt; all ints, no duplicates\n# print(df1['IMA Jump Count Med Band'].unique(), \"\\n\", df1['IMA Jump Count Med Band'].dtype) # -&gt; all ints, no duplicates\n# print(df1['IMA Jump Count High Band'].unique(), \"\\n\", df1['IMA Jump Count High Band'].dtype) # -&gt; all ints, no duplicates\nprint(df1['Explosive Efforts'].unique(), \"\\n\", df1['Explosive Efforts'].dtype) # -&gt; all ints, no duplicates\n\n[40 50 54 30  4 26 33 20 29 10 43 37 44 12 27 22  5 31 21 36 34 39 58 32\n 38 19 45 42 49  6 18 59 56 25 13 23 24 35  1 41 60 52 11  0 47 14 57  8\n 72  2  7 17  9 28 46 62 69 15 16 51 61 53  3 63 71 48 81 55 66 64 65] \n int64",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "datacleaning.html#check-for-duplicatescorrect-data-types-in-df2",
    "href": "datacleaning.html#check-for-duplicatescorrect-data-types-in-df2",
    "title": "2  Data Cleaning",
    "section": "2.5 Check for Duplicates/Correct Data Types in df2:",
    "text": "2.5 Check for Duplicates/Correct Data Types in df2:\nOnce again, we can use the .unique() and .value_counts() functions to check for duplicates that might be caused by spaces or change in data types.\n\n#There exists more commented out lines for the sake of overwhelming print statements. They have a similar purpose to the last line. Uncomment them out to replicate our cleaning.\n# print(df2['Date'].unique() , \"\\n\", df2['Date'].dtype) # -&gt; all objects, no duplicates\n# print(df2['About'].unique() , \"\\n\", df2['About'].dtype) # -&gt; all objects, no duplicates\nprint(df2['Position'].unique() , \"\\n\", df2['Position'].dtype) # -&gt; all objects, no duplicates\n\n['Forward' 'Guard' 'Center'] \n object\n\n\nWe only want to look at data for game-related observations, so we are only keeping rows where “Period 1” and “Period 2” are the Period type.\n\n# Period 1, Period 2\nkrows = []\n\nfor i in range(len(df2)):\n    value = str(df2.loc[i, 'Period'])\n    if 'Period 1' in value or 'Period 2' in value:\n        krows.append(i)\ndf2 = df2.loc[krows].reset_index(drop=True)\n\nBe more specific when dropping rows now, since some of the rows kept did include “Period 1”, but were actually a Scrimmage Period 1 not a game.\n\n# delete rows with \"Scrimmage\"\ndrows = []\n\nfor i in range(len(df2)):\n    value = str(df2.loc[i, 'Period'])\n    if 'Scrimmage' in value:\n        drows.append(i)\n    if 'Drill' in value:\n        drows.append(i)\n\ndf2.drop(index=drows, inplace=True)\ndf2.reset_index(drop=True, inplace=True)\n\ndf2['Period'].value_counts()\n\nPeriod\n3. Period 1    177\n2. Period 1    138\n3. Period 2    135\n4. Period 2     86\n5. Period 2     86\n8. Period 1     13\n9. Period 2     13\n2. Period 2      9\n1. Period 1      1\nName: count, dtype: int64\n\n\nTo finish cleaning the Period column, we are going to make sure that there are no duplicates in this column. Since some of these duplicates included a period number in the Period value, we will remove them to make them all merge into only two unique values.\n\n# Period 1 = 1, Period 2 = 2\n\n# cleaning Period 1\nif \"2. Period 1\" in df2['Period'].values:\n    df2['Period'] = df2['Period'].replace(\"2. Period 1\", \"Period 1\")\nif \"3. Period 1\" in df2['Period'].values:\n    df2['Period'] = df2['Period'].replace(\"3. Period 1\", \"Period 1\")\nif \"1. Period 1\" in df2['Period'].values:\n    df2['Period'] = df2['Period'].replace(\"1. Period 1\", \"Period 1\")\nif \"8. Period 1\" in df2['Period'].values:\n    df2['Period'] = df2['Period'].replace(\"8. Period 1\", \"Period 1\")\n\n# cleaning Period 2\nif \"2. Period 2\" in df2['Period'].values:\n    df2['Period'] = df2['Period'].replace(\"2. Period 2\", \"Period 2\")\nif \"4. Period 2\" in df2['Period'].values:\n    df2['Period'] = df2['Period'].replace(\"4. Period 2\", \"Period 2\")\nif \"3. Period 2\" in df2['Period'].values:\n    df2['Period'] = df2['Period'].replace(\"3. Period 2\", \"Period 2\")\nif \"5. Period 2\" in df2['Period'].values:\n    df2['Period'] = df2['Period'].replace(\"5. Period 2\", \"Period 2\")\nif \"9. Period 2\" in df2['Period'].values:\n    df2['Period'] = df2['Period'].replace(\"9. Period 2\", \"Period 2\")\n\nelse:\n    df2['Period'] = df2['Period']\n\nprint(df2['Period'].value_counts())\n\nPeriod\nPeriod 1    329\nPeriod 2    329\nName: count, dtype: int64\n\n\nContinuing to check the columns:\n\n#There exists more commented out lines for the sake of overwhelming print statements. They have a similar purpose to the last line. Uncomment them out to replicate our cleaning.\n# print(df2['Total Player Load'].value_counts(), \"\\n\", df2['Total Player Load'].dtype) # -&gt; all floats\n# print(df2['Player Load Per Minute'].unique(), \"\\n\", df2['Player Load Per Minute'].dtype) # -&gt; all floats w/ one decimal place\n# print(df2['IMA Accel Total'].unique(), \"\\n\", df2['IMA Accel Total'].dtype) # -&gt; all ints, no duplicates\n# print(df2['IMA Decel Total'].unique(), \"\\n\", df2['IMA Decel Total'].dtype) # -&gt; all ints, no duplicates \n# print(df2['IMA Jump Count Low Band'].unique(), \"\\n\", df2['IMA Jump Count Low Band'].dtype) # -&gt; all ints, no duplicates\n# print(df2['IMA Jump Count Med Band'].unique(), \"\\n\", df2['IMA Jump Count Med Band'].dtype) # -&gt; all ints, no duplicates\n# print(df2['IMA Jump Count High Band'].unique(), \"\\n\", df2['IMA Jump Count High Band'].dtype) # -&gt; all ints, no duplicates\nprint(df2['Explosive Efforts'].unique(), \"\\n\", df2['Explosive Efforts'].dtype) # -&gt; all ints, no duplicates\n\n[19 23  8  7 42 34 32 25 18 22 20  2  3 33 26 27  5  9 11  6 43 30 35 29\n 17 21 14  0 50 13 31 10 15 24 52 61 28 36 16 45 49 56 46  4 65 12 40 67\n 44 39 41 38 62 37 60 47 54 48 55 57 51 66 53 58 64] \n int64\n\n\nFor future use, like making our graphs and other analysis, we want to save the cleaned data sets as new csv files. Again: we did not provide the season1 or season 2 csv files due to sensitive data on real people.\n\ndf1.to_csv(\"./season1_cleaned.csv\", index=False)\ndf2.to_csv(\"./season2_cleaned.csv\", index=False)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "3  EDA",
    "section": "",
    "text": "3.1 Define Your Audience / Stakeholder\nThis report is made for the strength and training team for the men’s basketball team at UVA. Specifically made in mind for Mike Curtis, who is the head of strength and conditioning.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>EDA</span>"
    ]
  },
  {
    "objectID": "eda.html#define-your-problem-statement",
    "href": "eda.html#define-your-problem-statement",
    "title": "3  EDA",
    "section": "3.2 Define Your Problem Statement",
    "text": "3.2 Define Your Problem Statement\nInjuries plague every athlete team, especially as the season progresses. How does a player’s position dictate their PlayerLoad and therefore their likelihood of injury?",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>EDA</span>"
    ]
  },
  {
    "objectID": "eda.html#key-variables",
    "href": "eda.html#key-variables",
    "title": "3  EDA",
    "section": "3.3 Key Variables",
    "text": "3.3 Key Variables\nIndependent variable: Date or the time during the season the game was played, will be separated by season (not including the practice dates) Dependent Variables: These will be measuring the amount of effort or exertion in a game, such as Total Acceleration Efforts, Total Player Load, Player Load per Minute, IMA Accel Total, IMA Decel Total, IMA Jump, and the Explosive Efforts.\nWe are also planning on studying how this varies by specific player throughout a season and by the average positions. In order to find this we will use the About, Date, and Position columns.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>EDA</span>"
    ]
  },
  {
    "objectID": "eda.html#descriptive-statistics-distributions",
    "href": "eda.html#descriptive-statistics-distributions",
    "title": "3  EDA",
    "section": "3.4 Descriptive Statistics & Distributions",
    "text": "3.4 Descriptive Statistics & Distributions\n\n3.4.1 Import all necessary libraries:\n\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n\n\n3.4.2 Load the cleaned data sets:\n\ndf1 = pd.read_csv(\"./season1_cleaned.csv\")\ndf2 = pd.read_csv(\"./season2_cleaned.csv\")\n\n\n\n3.4.3 Creating Functions for Plotting and Printing Stats\n\n# Function to create a histogram for numerical columns\ndef hist_stat(col, seasondf):\n    # Season/column specific:\n    color = ''\n    season = ''\n    # if Season 1, make it purple\n    if seasondf.equals(df1):\n        season = 'Season 1'\n        color = 'purple'\n    # if Season 2, make it green\n    elif seasondf.equals(df2):\n        season = 'Season 2'\n        color = 'green'\n    else:\n        season = 'Unknown Season'\n        color = 'blue'\n\n    # Plot the histogram\n    plt.hist(col, bins=30, color=color, alpha=0.5, edgecolor='black')\n    # Remove spines\n    plt.gca().spines['top'].set_visible(False)\n    plt.gca().spines['right'].set_visible(False)\n    # Add title\n    title = season + \" \" + col.name + \" \" + 'Distribution'\n    plt.title(title)\n    # Add xlabel\n    plt.xlabel(col.name)\n    plt.show()\n\n    # Print numerical statistics, such as mean, standard deviation, minimum, maximum, and percentiles \n    mean = np.mean(col)\n    std = np.std(col)\n    min = np.min(col)\n    max = np.max(col)\n    percentiles = np.percentile(col, [25, 50, 75])\n    print(\"mean:\", mean, \"\\nstd:\", std, \"\\nmin:\", min, \"\\nmax:\", max, \"\\nPercentiles:\", percentiles)\n\n# Function to create a histogram for categorical columns\ndef categorical_stats(col, dataframe):\n    color = ''\n    season = ''\n    # if Season 1, make it purple\n    if dataframe.equals(df1):\n        season = 'Season 1'\n        color = 'purple'\n    # if Season 2, make it green\n    elif dataframe.equals(df2):\n        season = 'Season 2'\n        color = 'green'\n    else:\n        season = 'Unknown Season'\n        color = 'blue'\n\n    # Plot the histogram\n    plt.hist(col, color=color, edgecolor='black')\n    # Remove spines\n    plt.gca().spines['top'].set_visible(False)\n    plt.gca().spines['right'].set_visible(False)\n    # Add title\n    title = season + \" \" + col.name\n    plt.title(title)\n    plt.show()\n\n\n3.4.3.1 Total Player Load Graphs:\n\nhist_stat(df1['Total Player Load'], df1)\nhist_stat(df2['Total Player Load'], df2)\n\n\n\n\n\n\n\n\nmean: 241.77308759124088 \nstd: 105.40557579091106 \nmin: 0.155 \nmax: 494.021 \nPercentiles: [167.444   256.8645  320.69175]\n\n\n\n\n\n\n\n\n\nmean: 190.69367781155015 \nstd: 87.44444716531845 \nmin: 0.251 \nmax: 430.681 \nPercentiles: [115.1855  188.7165  262.91825]\n\n\nFrom the 2 seasons worth of Total Player Load distributions and statistics, it appears:\n\nThere’s a slight positive skew (right skewed) with a high peak towards lower values (less than 50).\nIt appears that there’s a smaller peak towards 150 to 175\nA gradual decline after 200 all the way to 400+ in Total Player Load appears to exist.\nPercentiles also display similar patterns with the 25, 50, 75 percentiles for both seasons.\nSeason 1 saw a higher initial peak at near 200 for a low point whereas Season 2 saw the highest frequency around 175 for the initial peak.\n\nThe distributions were similar, but the initial peaks were different. Therefore, we might want to look more into why Total Player Load sees this unusual distribution.\n\n\n3.4.3.2 Player Load Per Minute Graphs:\n\nhist_stat(df1['Player Load Per Minute'], df1)\nhist_stat(df2['Player Load Per Minute'], df2)\n\n\n\n\n\n\n\n\nmean: 12.639233576642336 \nstd: 2.3229364432038557 \nmin: 1.2 \nmax: 19.7 \nPercentiles: [11.175 12.6   14.   ]\n\n\n\n\n\n\n\n\n\nmean: 10.86595744680851 \nstd: 2.2742504182157637 \nmin: 0.9 \nmax: 17.1 \nPercentiles: [ 9.9 10.9 12.1]\n\n\nCompared to Total Player Load, the Player Load Per Minute attains a relatively normal and symmetrical distribution. This indicates that players more so see an “average” Player load Per Minute between 5 to around 12.5 Player Load for every minute whereas Total Player Load varies greatly between players in certain warmup/game groups.\n\n\n3.4.3.3 IMA Accel Total Graphs:\n\nhist_stat(df1['IMA Accel Total'], df1)\nhist_stat(df2['IMA Accel Total'], df2)\n\n\n\n\n\n\n\n\nmean: 48.083941605839414 \nstd: 23.163578047602947 \nmin: 0 \nmax: 121 \nPercentiles: [32.  47.5 64. ]\n\n\n\n\n\n\n\n\n\nmean: 36.765957446808514 \nstd: 20.059560153866244 \nmin: 0 \nmax: 123 \nPercentiles: [22. 34. 49.]\n\n\n\n\n3.4.3.4 IMA Decel Total Graphs:\n\nhist_stat(df1['IMA Decel Total'], df1)\nhist_stat(df2['IMA Decel Total'], df2)\n\n\n\n\n\n\n\n\nmean: 50.556569343065696 \nstd: 23.999439103480896 \nmin: 0 \nmax: 114 \nPercentiles: [32.  52.5 69. ]\n\n\n\n\n\n\n\n\n\nmean: 47.433130699088146 \nstd: 23.725108784898293 \nmin: 0 \nmax: 134 \nPercentiles: [30. 45. 64.]\n\n\nThe IMA Accel Total Distribution is more positively/right skewed compared to that of the IMA Decel Total when we compare the respective season graphs along with the percentile breakdowns. This is likely due to most players not accelerating or decreasing that often, but rather due to minor movements contributing to slowing down or speeding up. For example, a player could passively walk forward one step, and this would count as an acceleration.\nAnother contributing factor could be that in IMA Decel Total that basketball players also back pedal during games/warm-ups. Catapult sensors might have a hard time understanding that facing one direction while accelerating in the opposite is possible. So in IMA Decel Total, we might see a second small peak around 30 for both because the sensors think the person is decelerating when they’re accelerating in a back pedal.\n\n\n3.4.3.5 IMA Jump Count Low Band Graphs:\n\nhist_stat(df1['IMA Jump Count Low Band'], df1)\nhist_stat(df2['IMA Jump Count Low Band'], df2)\n\n\n\n\n\n\n\n\nmean: 13.246350364963504 \nstd: 7.394481901565035 \nmin: 0 \nmax: 46 \nPercentiles: [ 8. 12. 18.]\n\n\n\n\n\n\n\n\n\nmean: 13.300911854103344 \nstd: 8.74098923380777 \nmin: 0 \nmax: 53 \nPercentiles: [ 7. 11. 17.]\n\n\n\n\n3.4.3.6 IMA Jump Count Med Band Graphs:\n\nhist_stat(df1['IMA Jump Count Med Band'], df1)\nhist_stat(df2['IMA Jump Count Med Band'], df2)\n\n\n\n\n\n\n\n\nmean: 7.666058394160584 \nstd: 4.7241205658490255 \nmin: 0 \nmax: 27 \nPercentiles: [ 4.  7. 10.]\n\n\n\n\n\n\n\n\n\nmean: 6.145896656534954 \nstd: 3.883953803064002 \nmin: 0 \nmax: 23 \nPercentiles: [3. 6. 9.]\n\n\n\n\n3.4.3.7 IMA Jump Count High Band Graphs:\n\nhist_stat(df1['IMA Jump Count High Band'], df1)\nhist_stat(df2['IMA Jump Count High Band'], df2)\n\n\n\n\n\n\n\n\nmean: 5.855839416058394 \nstd: 3.5157651496298046 \nmin: 0 \nmax: 19 \nPercentiles: [3. 6. 8.]\n\n\n\n\n\n\n\n\n\nmean: 5.775075987841945 \nstd: 4.403078372952223 \nmin: 0 \nmax: 26 \nPercentiles: [2. 5. 8.]\n\n\nOverall, all of the IMA Jump Count... (Low/Med/High) ...Band, experienced a right skew. It appears we have a higher amount of Low Bands as the maximums were much higher (67 and 70 for Season 1 and Season 2 respectively) compared to that of Med and High Bands.\nThis means there are some extreme outliers/observations that can contribute to analysis. For example, we might be able to look into which players induced these extreme outlier observations and then examine if there’s something different in their training regime that we can add to other player regimes.\nAnother reasoning for this positive skew is that players often observe a lack of Low/Med/High counts in terms of bands compared to experiencing these bands. We might need to take a look at the higher counts for each band to take a look at what’s different about these types of events (warm-up/game) compared to that of the lower counts for each band.\n\n\n3.4.3.8 Explosive Efforts Graphs:\n\nhist_stat(df1['Explosive Efforts'], df1)\nhist_stat(df2['Explosive Efforts'], df2)\n\n\n\n\n\n\n\n\nmean: 31.562043795620436 \nstd: 15.320832300898099 \nmin: 0 \nmax: 81 \nPercentiles: [20. 32. 42.]\n\n\n\n\n\n\n\n\n\nmean: 24.53647416413374 \nstd: 13.649856352721827 \nmin: 0 \nmax: 67 \nPercentiles: [14. 23. 33.]\n\n\nIn Explosive Efforts, it appears we have yet another positively skewed distribution. In Season 1, we see a lower frequency for the minimum (0) compared to that of Season 2. Otherwise, the shape of the rest of the distribution remains relatively similar.\nThis may be a result of players not experiencing any Explosive Efforts at specific periods. We might want to take a look at the wins/losses of games in Season 1 and 2. Allowing us to compare successes across seasons. This would allow us to see a possible correlation with non-explosive efforts in both seasons. There might be a correlation, but as of now we’re not sure what the correlation might be.\n\n\n3.4.3.9 Position Graphs:\n\ncategorical_stats(df1['Position'], df1)\ncategorical_stats(df2['Position'], df2)\n\nprint(df1['Position'].unique())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n['Guard' 'Forward' 'Center']\n\n\nConsistently, we see more observations for Period under Guard than in Forward and in Center (ordered in descending order). This might indicate that warmups/movement prep/game periods witnessed more Guard activity than that of the other positions. We might be able to explore how this impacts the Guard(s) during gamedays/warmups, and if we should be focusing attentions on the others in Position in the same manner.\n\n\n3.4.3.10 Period Graphs:\n\ncategorical_stats(df1['Period'], df1)\ncategorical_stats(df2['Period'], df2)\n\nprint(df1['Period'].unique())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n['Period 1' 'Period 2']\n\n\nA couple things to note is that warm-ups experienced higher observations. Movement prep, even with numbers of observations in Season 1, experienced significantly lower observations in Period 1 and Period 2 of Season 2 in comparison.\n\n\n\n3.4.4 Examine Correlations\n\n3.4.4.1 Correlations above 0.75:\n\nIMA Accel Total and Total Player Load(0.86)\nIMA Decel Total and Total Player Load(0.84)\nExplosive Efforts and Total Player Load(0.77)\nIMA Accel Total and IMA Decel Total(0.75)\nExplosive Efforts and IMA Accel Total(0.84)\nExplosive Efforts and IMA Decel Total(0.76)\n\n\n# Creating a pairplot for the variables  \nsns.pairplot(df2[['Total Player Load', 'Player Load Per Minute', 'IMA Accel Total',\n       'IMA Decel Total', 'IMA Jump Count Low Band', 'IMA Jump Count Med Band',\n       'IMA Jump Count High Band', 'Explosive Efforts']], plot_kws={'alpha': 0.5})\nplt.show()\n\n# Calculating the correlations for the variables\ncorrelation = df2[['Total Player Load', 'Player Load Per Minute', 'IMA Accel Total',\n        'IMA Decel Total', 'IMA Jump Count Low Band', 'IMA Jump Count Med Band',\n        'IMA Jump Count High Band', 'Explosive Efforts']].corr()\nplt.figure(figsize=(10, 8))\n# Plotting the correlation in a heatmap \nsns.heatmap(correlation, annot=True, cmap='coolwarm', center=0)\n# Adding a title \nplt.title('Correlation between 3 continuous chosen variables')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCorrelations above 0.75:\n\nIMA Accel Total and Total Player Load(0.82)\nIMA Decel Total and Total Player Load(0.9)\nExplosive Efforts and Total Player Load(0.79)\nIMA Decel Total and IMA Accel Total(0.75)\nExplosive Efforts and IMA Accel Total(0.84)\nExplosive Efforts and IMA Decel Total(0.84)\n\nNegative Correlations:\n\nIMA Jump Count Med Band and Player Load per Minute(-0.41)\nIMA Jump Count High Band and Player Load per Minute(-0.064)\nIMA Accel Total and IMA Jump Count Med Band(-0.014)\nIMA Jump Count Low Band and IMA Jump Count Med Band(-0.054)\nExplosive Efforts and IMA Jump Count Med Band(-0.19)\n\nWe thought these negative correlations were an interesting factor because they were not seen in the Season 1’s data set.\n\n\n\n3.4.5 Explore Relationships\n\n3.4.5.1 Relationship between IMA Accel Total and Total Player Load\n\nfig, axes = plt.subplots(1, 2, figsize=(12, 5))\n# Creating a scatterplot to look at the relationship in Season 1 \nsns.scatterplot(data=df1, x='IMA Accel Total', y='Total Player Load', ax=axes[0], color='blue')\n# Setting title and axis labels \naxes[0].set_title('Season 1 IMA Accel Total vs Total Player Load')\naxes[0].set_xlabel('IMA Accel Total')\naxes[0].set_ylabel('Total Player Load')\n\n# Creating a scatterplot to look at the relationship in Season 2\nsns.scatterplot(data=df2, x='IMA Accel Total', y='Total Player Load', ax=axes[1], color='green')\n\n# Setting title and axis labels \naxes[1].set_title('Season 2 IMA Accel Total vs Total Player Load')\naxes[1].set_xlabel('IMA Accel Total')\naxes[1].set_ylabel('Total Player Load')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nBoth relationships appear to be positive and strongly correlated.\n\n\n3.4.5.2 Relationship between IMA Decel Total and Total Player Load\n\nfig, axes = plt.subplots(1, 2, figsize=(12, 5))\n\n# Creating a scatterplot to look at the relationship in Season 1 \nsns.scatterplot(data=df1, x='IMA Decel Total', y='Total Player Load', ax=axes[0], color='blue')\n# Setting title and axis labels \naxes[0].set_title('Season 1 IMA Decel Total vs Total Player Load')\naxes[0].set_xlabel('IMA Decel Total')\naxes[0].set_ylabel('Total Player Load')\n\n# Creating a scatterplot to look at the relationship in Season 2\nsns.scatterplot(data=df2, x='IMA Decel Total', y='Total Player Load', ax=axes[1], color='green')\n\n# Setting title and axis labels \naxes[1].set_title('Season 2 IMA Decel Total vs Total Player Load')\naxes[1].set_xlabel('IMA Decel Total')\naxes[1].set_ylabel('Total Player Load')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nBoth relationships are highly correlated and seem to have small differences in their trends.\n\n\n3.4.5.3 Relationship between Explosive Efforts and Total Player Load\n\nfig, axes = plt.subplots(1, 2, figsize=(12, 5))\n\n# Creating a scatterplot to look at the relationship in Season 1\nsns.scatterplot(data=df1, x='Explosive Efforts', y='Total Player Load', ax=axes[0], color='blue')\n# Setting title and axis labels \naxes[0].set_title('Season 1 Explosive Efforts v. Total Player Load')\naxes[0].set_xlabel('Explosive Efforts')\naxes[0].set_ylabel('Total Player Load')\n\n# Creating a scatterplot to look at the relationship in Season 2 \nsns.scatterplot(data=df2, x='Explosive Efforts', y='Total Player Load', ax=axes[1], color='green')\n\n# Setting title and axis labels \naxes[1].set_title('Season 2 Explosive Efforts v. Total Player Load')\naxes[1].set_xlabel('Explosive Efforts')\naxes[1].set_ylabel('Total Player Load')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nBoth relationships are highly correlated and seem to have small differences in their trends.\n\n\n3.4.5.4 Relationship between IMA Decel Total and IMA Accel Total\n\nfig, axes = plt.subplots(1, 2, figsize=(12, 5))\n\n# Creating a scatterplot to look at the relationship in Season 1\nsns.scatterplot(data=df1, x='IMA Decel Total', y='IMA Accel Total', ax=axes[0], color='blue')\n# Setting title and axis labels \naxes[0].set_title('Season 1 IMA Decel Total v. IMA Accel Total')\naxes[0].set_xlabel('IMA Decel Total')\naxes[0].set_ylabel('IMA Accel Total')\n\n# Creating a scatterplot to look at the relationship in Season 2\nsns.scatterplot(data=df2, x='IMA Decel Total', y='IMA Accel Total', ax=axes[1], color='green')\n\n# Setting title and axis labels \naxes[1].set_title('Season 1 IMA Decel Total v. IMA Accel Total')\naxes[1].set_xlabel('IMA Decel Total')\naxes[1].set_ylabel('IMA Accel Total')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nBoth relationships are moderate to strongly correlated and seem to have few differences in their trends.\n\n\n3.4.5.5 Relationship between IMA Accel Total and Explosive Efforts\n\nfig, axes = plt.subplots(1, 2, figsize=(12, 5))\n\n# Creating a scatterplot to look at the relationship in Season 1 \nsns.scatterplot(data=df1, x='IMA Accel Total', y='Explosive Efforts', ax=axes[0], color='blue')\n# Setting title and axis labels \naxes[0].set_title('Season 1 IMA Accel Total vs Explosive Efforts')\naxes[0].set_xlabel('IMA Accel Total')\naxes[0].set_ylabel('Explosive Efforts')\n\n# Creating a scatterplot to look at the relationship in Season 2\nsns.scatterplot(data=df2, x='IMA Accel Total', y='Explosive Efforts', ax=axes[1], color='green')\n\n# Setting title and axis labels \naxes[1].set_title('Season 2 IMA Accel Total vs Explosive Efforts')\naxes[1].set_xlabel('IMA Accel Total')\naxes[1].set_ylabel('Explosive Efforts')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nThese correlations appear to be positive and moderate-highly. Their trends occur to be different with the season 2 data to have a higher trend line.\n\n\n3.4.5.6 Relationship between IMA Decel Total and Explosive Efforts\n\nfig, axes = plt.subplots(1, 2, figsize=(12, 5))\n\n# Creating a scatterplot to look at the relationship in Season 1\nsns.scatterplot(data=df1, x='IMA Decel Total', y='Explosive Efforts', ax=axes[0], color='blue')\n# Setting title and axis labels \naxes[0].set_title('Season 1 IMA Decel Total vs Explosive Efforts')\naxes[0].set_xlabel('IMA Decel Total')\naxes[0].set_ylabel('Explosive Efforts')\n\n# Creating a scatterplot to look at the relationship in Season 2\nsns.scatterplot(data=df2, x='IMA Decel Total', y='Explosive Efforts', ax=axes[1], color='green')\n# Setting title and axis labels \naxes[1].set_title('Season 2 IMA Decel Total vs Explosive Efforts')\naxes[1].set_xlabel('IMA Decel Total')\naxes[1].set_ylabel('Explosive Efforts')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nBoth the comparisons of IMA Decel Total and IMA Accel Totals compared to Explosive Efforts are very similar. The trends both show the same shape and correlations.\n\n\n\n3.4.6 Looking at negative correlations:\n\nIMA Jump Count Med Band and Player Load per Minute(-0.41)\nIMA Jump Count High Band and Player Load per Minute(-0.064)\nIMA Accel Total and IMA Jump Count Med Band(-0.014)\nIMA Jump Count Low Band and IMA Jump Count Med Band(-0.054)\nExplosive Efforts and IMA Jump Count Med Band(-0.19)\n\n\n3.4.6.1 Relationship between IMA Jump Count Med Band and Player Load Per Minute\n\nfig, axes = plt.subplots(1, 2, figsize=(12, 5))\n\n# Creating a scatterplot to look at the relationship in Season 1\nsns.scatterplot(data=df1, x='IMA Jump Count Med Band', y='Player Load Per Minute', ax=axes[0], color='blue')\n# Setting title and axis labels \naxes[0].set_title('Season 2 Jump Count Med Band vs Player Load per Minute')\naxes[0].set_xlabel('IMA Jump Count Med Band')\naxes[0].set_ylabel('Player Load per Minute')\n\n# Creating a scatterplot to look at the relationship in Season 2 \nsns.scatterplot(data=df2,x = 'IMA Jump Count Med Band', y='Player Load Per Minute', ax=axes[1], color='green')\n\n# Setting title and axis labels \naxes[1].set_title('Season 2 Jump Count Med Band vs Player Load per Minute')\naxes[1].set_xlabel('IMA Jump Count Med Band')\naxes[1].set_ylabel('Player Load Per Minute')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nThese correlations appear to not be overwhelmingly negative but rather just scattered in similar ways with a slight negative skew for the Season 2 data. We will not be exploring the lower correlated sets as it’s clear that the negative value is not fully important for the relationships with such small correlations.\n\n\n3.4.6.2 Exploring the Negative Correlation(0.19) between IMA Jump Count Med Band and Explosive Efforts\n\nfig, axes = plt.subplots(1, 2, figsize=(12, 5))\n\n# Creating a scatterplot to look at the relationship in Season 1 \nsns.scatterplot(data=df1, x='IMA Jump Count Med Band', y='Explosive Efforts', ax=axes[0], color='blue')\n# Setting titles and axis labels \naxes[0].set_title('Season 1 Jump Count High Band vs Player Load')\naxes[0].set_xlabel('IMA Jump Count Med Band')\naxes[0].set_ylabel('Explosive Efforts')\n\n# Creating a scatterplot to look at the relationship in Season 2 \nsns.scatterplot(data=df2,x = 'IMA Jump Count Med Band', y='Explosive Efforts', ax=axes[1], color='green')\n\n# Setting titles and axis labels \naxes[1].set_title('Season 2 Jump Count High Band vs Player Load')\naxes[1].set_xlabel('IMA Jump Count Med Band')\naxes[1].set_ylabel('Explosive Efforts')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nThe correlation between IMA Jump Count Med Band and Explosive Efforts is different for both the Season 1 data(0.076) and the Season 2 data(-0.19). This raises the question of a potential different play style, or energy exertion during the games.\n\n\n3.4.6.3 Statistical Analysis of IMA Jump Count Med Band and Explosive Efforts\n\n# Creating a third dataframe to compare IMA Jump Count Med Band across both seasons \ndf3= pd.DataFrame({\n    'IMA Jump Count Med Band': pd.concat([df1['IMA Jump Count Med Band'], df2['IMA Jump Count Med Band']], ignore_index=True),\n    'Season': ['Season 1'] * len(df1) + ['Season 2'] * len(df2)\n})\n\nplt.figure(figsize=(8, 6))\n# Creating boxplot to compare IMA Jump Count Med Band across seasons \nsns.boxplot(data=df3, x='Season', y='IMA Jump Count Med Band', hue='Season', palette='spring')\n\n# Adding title and axis labels \nplt.ylabel('IMA Jump Count Med Band')\nplt.title('IMA Jump Count Med Band: Season 1 vs Season 2')\nplt.grid(axis='y')\nplt.show()\n\n\n\n\n\n\n\n\nIt appears that the Season 1 data has a larger spread then compared to Season 2. Though, the IQR is larger in the Season 2 data, meaning the values have more variability in this middle range. The mean of the Season 2 data is also slightly larger than that of the Season 1 data.\n\n# Creating a third dataframe to compare Explosive Efforts across both seasons \ndf3= pd.DataFrame({\n    'Explosive Efforts': pd.concat([df1['Explosive Efforts'], df2['Explosive Efforts']], ignore_index=True),\n    'Season': ['Season 1'] * len(df1) + ['Season 2'] * len(df2)\n})\n\nplt.figure(figsize=(8, 6))\n# Creating boxplot to compare Explosive Efforts across seasons \nsns.boxplot(data=df3, x='Season', y='Explosive Efforts', hue='Season', palette='spring')\n\n# Adding title and axis labels \nplt.ylabel('Explosive Efforts')\nplt.title('Explosive Efforts: Season 1 vs Season 2')\nplt.grid(axis='y')\nplt.show()\n\n\n\n\n\n\n\n\nThe spread of Explosive Efforts is larger in the Season 1 data, but the IQR is significantly larger in the Season 2 data. This means that the data has more variability in the mid range of Explosive Efforts. The mean is also larger in the Season 2 data, meaning players in Season 1 had fewer Explosive Efforts than that of Season 2.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>EDA</span>"
    ]
  },
  {
    "objectID": "dataviz.html",
    "href": "dataviz.html",
    "title": "4  Data Visualization",
    "section": "",
    "text": "4.1 Graph 1: Looking at the percentages of Total Player Load separate by Position, for each Period\n# Importing libraries\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Loading in cleaned data set \ndf1 = pd.read_csv(\"./season1_cleaned.csv\")\nTo get the data ready for our pie charts, we need to separate the one dataframe by Period to make new two dataframes: p1 and p2. For the two new dataframes, we wil use the groupby method to group the data by Position and then find the average of the Total Player Load for each position.\n# Separate df1 into dataframes for period 1 and for period 2\np1 = df1[df1['Period'] == 'Period 1'].copy().reset_index(drop=True)\np2 = df1[df1['Period'] == 'Period 2'].copy().reset_index(drop=True)\n\n# Take average of `Total Player Load` by `Position` for each period dataframe\n# Grouping by `Position`, then taking the mean of `Total Player Load`, then resetting the index \np1_avg = p1.groupby(['Position'])['Total Player Load'].mean().reset_index()\np2_avg = p2.groupby(['Position'])['Total Player Load'].mean().reset_index()\n\n# Print dataframes\nprint(p1_avg,\"\\n\")\nprint(p2_avg)\n\n  Position  Total Player Load\n0   Center         109.076500\n1  Forward         216.843042\n2    Guard         267.258140 \n\n  Position  Total Player Load\n0   Center          88.344647\n1  Forward         238.046535\n2    Guard         278.306542\nNow that we have the averages, we will divide each position’s Total Player Load by the sum of all positions, Total Player Load, to get the percentage. This percentage will be stored in a new column, Proportion.\n# Add a new column, Proportion, for each position's TPL for each period \np1_avg['Proportion'] = p1_avg['Total Player Load'] / p1_avg['Total Player Load'].sum()\np2_avg['Proportion'] = p2_avg['Total Player Load'] / p2_avg['Total Player Load'].sum()\n\n# Print dataframes w/ new column\nprint(p1_avg, \"\\n\")\nprint(p2_avg)\n\n  Position  Total Player Load  Proportion\n0   Center         109.076500    0.183885\n1  Forward         216.843042    0.365562\n2    Guard         267.258140    0.450553 \n\n  Position  Total Player Load  Proportion\n0   Center          88.344647    0.146097\n1  Forward         238.046535    0.393662\n2    Guard         278.306542    0.460241\nTo plot our donut charts, we will use the plot.pie method. Using subplots, we can create two donut charts side by side to demonstrate the percentages of Total Player Load for each Period in each Period.\n# Make color dict for positions\ncolors = {'Guard': '#E57200', 'Forward': '#232D4B', 'Center': '#C8CBD2'}\n\n# Make subplots, 1 row and 2 columns \nfig, ax = plt.subplots(1, 2, figsize=(9, 5))\n\n# Graphing Period 1 as ax[0], aka first subplot \n# the wedgeprops argument is used to give the hole in the center, the autopct argument is used to display the percentages, the pctdistance argument is used to change the distance of the percentage text\n# the textprops argument is used to change the font color and size, the startangle argument is used to rotate the chart, and the colors argument is used to change the colors of the wedges based on the position\nax[0].pie(p1_avg['Proportion'], labels=None, wedgeprops=dict(width=0.5), autopct='%1.1f%%', pctdistance=0.7, textprops={'color': 'white', 'fontsize': '12'}, startangle=90, colors=[colors[pos] for pos in p1_avg['Position']])\n# the annotate argument is used to add text to the center of the donut chart\nax[0].annotate('Period 1', xy=(0, 0), fontsize=15, ha='center')\n\n# Graphing Period 2 as ax[1], aka the second subplot\n# the arguments are the same as above, but with data from p2_avg \nax[1].pie(p2_avg['Proportion'], labels=None, wedgeprops=dict(width=0.5), autopct='%1.1f%%', pctdistance=0.7, textprops={'color': 'white', 'fontsize': '12'}, startangle=90, colors=[colors[pos] for pos in p2_avg['Position']])\nax[1].annotate('Period 2', xy=(0, 0), fontsize=15, ha='center')\n\n# Adding a title \nfig.suptitle('Guards Contribute A Higher Proportion of the Total Player Load', fontsize=18)\n\n# Adding a legend, and setting the location, font size, and position \nfig.legend(p1_avg['Position'], loc='center', bbox_to_anchor=(0.5, 0.8), title='Position', fontsize=12)\n\n# Making a tight layout and displaying the plot\nplt.tight_layout()\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dataviz.html#graph-2-looking-at-different-contributors-to-total-player-load-for-a-chosen-athlete.",
    "href": "dataviz.html#graph-2-looking-at-different-contributors-to-total-player-load-for-a-chosen-athlete.",
    "title": "4  Data Visualization",
    "section": "4.2 Graph 2: Looking at different contributors to Total Player Load for a chosen athlete.",
    "text": "4.2 Graph 2: Looking at different contributors to Total Player Load for a chosen athlete.\nIn this STACKED area graph, Explosive efforts, IMA Accel/Decel, and IMA Jump Band (Med, High, Low) were observed as contributors to Total Player Load. The data will be filtered for that of Athlete H in column About.\n\n# Importing libraries for graph 2\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.dates as mdates\nfrom matplotlib.patches import Patch\n\nThere must be setup in logistics like turning Date string from the dataset into a datetime structure and filtering the data just for that of Athlete H from column About:\n\n# Obtain `Date` from df1 and turn into datetime object through pandas\ndf1['Date'] = pd.to_datetime(df1['Date'], format='%m/%d/%y')\n\n# Not wanting to work straight on df1, I will create a copy of df1 to manipulate for this graph:\ndf1_copy = df1.copy()\n\n# sort for just Athlete H (athlete in Season 1 with highest incline in `Total Player Load)\ndf1_copy = df1_copy[df1_copy['About'] == 'Athlete H']\n\nThe three variables that will be looked at are the ones in the Season 1 dataset that relate to Total Player Load. For this purpose, 3 variables will be chosen/combined in a meaningful way for the graph. Here they are:\n\nIATS_IDTS_pct = IMA Accel Total and IMA Decel Total averaged\nJumps_pct = IMA Jump Count Low Band, IMA Jump Count Med Band, IMA Jump Count High Band averaged\nEES_pct =Explosive Efforts\n\nTo find the proportions, all 3 main variables will be divided by the Total Player Load at the matching Dates.\nThe next code block will find the proportion that each value takes of Total Player Load.\n\n# `Avg_IATS_IDTS_By_Date` is the average of the `IMA Accel/Decel` total. Having both independently on the graph causes busy-ness\n# They're similar in correlation to total player load (found through EDA)\ndf1_copy['Avg_IATS_IDTS_By_Date'] = (\n    df1_copy['IMA Accel Total'] + \n    df1_copy['IMA Decel Total']\n    ) / 2\ndf1_copy['IATS_IDTS_pct'] = df1_copy['Avg_IATS_IDTS_By_Date'] / df1_copy['Total Player Load']\n\n# `Avg_ijclb_ijcmb_ijchb_By_Date` is the average of the `IMA jump bands` from low, medium, and high. Having all independently on the graph causes busy-ness\n# They're similar in correlation to `Total Player Load` (found through EDA)\ndf1_copy['Avg_ijclb_ijcmb_ijchb_By_Date'] = (\n    df1_copy['IMA Jump Count Low Band'] +\n    df1_copy['IMA Jump Count Med Band'] +\n    df1_copy['IMA Jump Count High Band']\n    ) / 3\ndf1_copy['Jumps_pct'] = df1_copy['Avg_ijclb_ijcmb_ijchb_By_Date'] / df1_copy['Total Player Load']\n\n# `Explosive Efforts` can remain independent since there's only one \"version\"\ndf1_copy['EES_pct'] = df1_copy['Explosive Efforts'] / df1_copy['Total Player Load']\n\nThe code will group the 3 new columns by the Date they were recorded and averaged for graphical purposes. In addition, colors will be mapped to each column along with sorting the game dates in order for visual clarity purposes.\n\n# Take the mean of the `IATS_IDTS_pct`, `EES`, and `Jumps_pct` according to the specific game date\navg_df = df1_copy.groupby('Date')[[ 'IATS_IDTS_pct', 'EES_pct', 'Jumps_pct']].mean().reset_index()\navg_df.columns = ['Date',  'IATS_IDTS', 'EES', 'Jumps']\n\n# Colors mapped to each of the 3 variables for the graph\ncol_map = {\n    'IATS_IDTS': '#232D4B',  # UVA blue - `IATS_IDTS_pct`\n    'EES': '#E57200',  # UVA orange - `EES`\n    'Jumps': '#D3D3D3'  # gray - `Jumps_pct`\n}\n\n# Sort game dates in order (first game on November 7 to last game on March 14) - aids in graphs that look continuous and not chaotic (unexplainable visuals can happen in the graph without this line btw)\navg_df = avg_df.sort_values('Date')\n\nThe actual plot: This next part creates a STACKED AREA GRAPH of all 3 variables, starting with IATS_IDTS, followed by EES and Jumps. Coincidentally, this is the order highest to lowest of which variable “contributes” to the Total Player Load.\n\n# Creating \"wide\" graph to account for many dates across the season\nplt.figure(figsize=(10, 5))\n\n# Actual graphing - STACKED AREA GRAPH of:\n# X-Axis: Game Dates under `Date`\n# Y-Axis: Cumulative proportion of each variable: `IATS_IDTS`, `EES`, and `Jumps` (mapped to their colors)\nplt.stackplot(\n    avg_df['Date'],\n    avg_df['IATS_IDTS'],\n    avg_df['EES'],\n    avg_df['Jumps'],\n    colors=list(col_map.values()),  # Use color map from earlier\n    alpha=1  # make all colors solid, nothing less\n)\n\n# Remove axes (lines become distracting if not to the human eye)\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.gca().spines['bottom'].set_visible(False)\n\n# Take away the little horizontal tick lines beside the y-axis values\nplt.tick_params(axis='y', length=0)\n\n\n########################################################################################################################################################################\n# This next section is optional. Currently, none of the code contributes to the current graph due to the current graph not using a legend. Instead, we put the variables by color in the title. You may uncomment the legend block below to use, however.\nhandles = [  # Matches colors as they are shown top-bottom in the graph itself into the legend's top-down order\n    Patch(facecolor='#D3D3D3'),  # Top layer in graph (`Jumps`)\n    Patch(facecolor='#E57200'),  # Middle layer (`EES`)\n    Patch(facecolor='#232D4B'),  # Bottom layer (`IATS_IDTS`)\n]\n# Labels for the variables in the legend (see below legend code comments for what things to do with the legend and this list)\nlabels = [\n    'IMA Jump Band Counts',\n    'Explosive Efforts',\n    'IMA Accels & Decels'\n]\n\n# One can use a legend to list the colors from the map to each variable, but we've labeled them in the title.\n# Uncomment out if you'd like the legend instead of the title color indicators\n# plt.legend(\n#     handles=handles,\n#     labels=labels,\n#     loc=\"upper right\",\n#     bbox_to_anchor=(1, 1.2),\n#     frameon=False,\n#     fontsize=8\n# )\n########################################################################################################################################################################\n\n\n# The next codeblock inserts the X-axis label, Y-axis label, and title (with inserted words in respective color to act as the legend).\n\n# To replace the legend: place the variable English names of:\n# - IMA Acceleration/Deceleration: `IATS_IDTS`\n# - Explosive Efforts: `EES`\n# - IMA Jump Bands: `Jumps`\n# into the title (more code below)\nplt.text(0.45, 1.243, 'IMA Acceleration/Deceleration', transform=plt.gca().transAxes, fontsize=13, color='#000080')\nplt.text(0.097, 1.175, 'Explosive Efforts', transform=plt.gca().transAxes, fontsize=13, color='#E57200')\nplt.text(0.308, 1.175, 'IMA Jump Bands', transform=plt.gca().transAxes, fontsize=13, color='#adadad')\n\n# X-axis, Y-axis, and title labels coded in that order:\nplt.xlabel('Game Dates')\nplt.text(-0.009, 1.04, \"(Cumulative Proportions of Total Player Load)\", transform=plt.gca().transAxes)\nplt.title(\"Total Player Load Contributors in Season 1 Games:                                                       contributes the most,\\nfollowed by                               and                \", x=-0.01, y=1.15, loc='left')\n\n\n# There are some issues with displaying the X-axis dates, so we formatted them as \"month day\", with an example below. Then we start the dates at Nov 7 until Mar 14 without putting Nov 1 or Mar 15 as the start and end X-axis numbers. Now we have the whole graph!\n# X-axis logistics: formatting dates by \"month day\", ex: \"Nov 15\"\nplt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=1)) \nplt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%b %d'))\nplt.gca().xaxis.set_major_locator(mdates.AutoDateLocator())\n\n# don't want floating dates before or after the first game date or last game `Date`. \n# Just limit to what is the first and last game `Date` (Nov 7 to Mar 14, but don't list these)\nplt.xlim(avg_df['Date'].min(), avg_df['Date'].max())\n\n# Finally: Show the whole graph!\nplt.tight_layout()\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dataviz.html#graph-3-looking-at-cumulative-player-load-over-the-course-of-the-season-by-positon-highlighting-player-h.",
    "href": "dataviz.html#graph-3-looking-at-cumulative-player-load-over-the-course-of-the-season-by-positon-highlighting-player-h.",
    "title": "4  Data Visualization",
    "section": "4.3 Graph 3: Looking at Cumulative Player Load over the course of the season by positon, highlighting player H.",
    "text": "4.3 Graph 3: Looking at Cumulative Player Load over the course of the season by positon, highlighting player H.\nThis graph works to show how Total Player Load progressives over the season, with guards (especially Athlete H) dominating cumulative Total Player Load during the season.\n\n# No imports are needed as they are loaded above\n# Groups the data by date, about, and position, then it sums the `Total Player Load` by each date and athlete in `About`\n\ngamesums1 = df1.groupby(['Date', 'About', 'Position'])['Total Player Load'].sum().reset_index()\n\n# Creates new DataFrame with desired columns\nPL_per_player_df1 = gamesums1[['Date', 'About', 'Position', 'Total Player Load']].copy()\n\n# Rename columns for clarity\nPL_per_player_df1.rename(columns={'About': 'Player'}, inplace=True)\n\n# Converts the date to represent datetime format\nPL_per_player_df1['Date'] = pd.to_datetime(PL_per_player_df1['Date'])\n\n# Sorts by `Date`\nPL_per_player_df1.sort_values(by='Date', inplace=True)\nPL_per_player_df1.reset_index(drop=True, inplace=True)\n\n# Creating color assignments to differentiate each `Position`\ncolors = {\n    'Forward': '#232D4B',\n    'Guard': '#E57200',\n    'Center': '#024CAA'\n}\n# Setting a figure size for the graph\nplt.figure(figsize=(20, 8))\n\n# Loops through each unique player and appends their information to a new data set, in order of the game `Date`, including the athlete letter from `About`, `Position`, and cumulative sum of `Total Player Load`\nfor player in PL_per_player_df1['Player'].unique():\n  player_data1 = PL_per_player_df1[PL_per_player_df1['Player'] == player].copy()\n  player_data1.sort_values('Date', inplace = True)\n  player_data1['Cumulative Load'] = player_data1['Total Player Load'].cumsum()\n  position = player_data1['Position'].iloc[0]\n  color = colors.get(position, 'gray')\n  linewidth = 6 if player == 'Athlete H' else 2\n  sns.lineplot(x=player_data1['Date'], y=player_data1['Cumulative Load'], color = color, linewidth=linewidth)\n\n#Adding text to the graph, removing the x axis label for clearer results, adding the y axis label to the left upper corner\nplt.text(0.15, 1.1, 'Season 1 Cumulative Player Load for', fontsize=25, ha='left', va='center', transform=plt.gca().transAxes, color='#000000')\nplt.text(0.84, .82, 'Athlete H', fontsize=15, transform=plt.gca().transAxes, color='#E57200', rotation = 27)\nplt.text(0.493, 1.1, 'Guards,', fontsize=25, ha='left', va='center', transform=plt.gca().transAxes, color='#E57200')\nplt.text(0.57, 1.1, 'Forwards,', fontsize=25, ha='left', va='center', transform=plt.gca().transAxes, color='#232D4B')\nplt.text(0.663, 1.1, 'and', fontsize=25, ha='left', va='center', transform=plt.gca().transAxes, color='#000000')\nplt.text(0.7, 1.1, 'Centers', fontsize=25, ha='left', va='center', transform=plt.gca().transAxes, color='#024CAA')\nplt.text(-0.04, 1.04, 'Cumulative PL', fontsize=15, ha='left', va='center', transform=plt.gca().transAxes, color='#000000')\nplt.xlabel('')\nplt.ylabel('')\n\n#Adds major tick marks for each month\nplt.gca().xaxis.set_major_locator(mdates.MonthLocator())\nplt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n\n#Sets x and y tick labels to a certain font size\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\n\n#Removes the top and right spines \nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.tight_layout()\nplt.grid(False)\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "datadictionary.html",
    "href": "datadictionary.html",
    "title": "5  Data Dictionary",
    "section": "",
    "text": "5.1 A collection of the variables being used in the project and their definitions.\nPosition: Athlete’s Position - either Center, Forward, or Guard.\nDate: The date the game was played.\nAbout: The assigned athlete identification letter.\nPeriod: Game period - either Period 1 or Period 2.\nTotal Player Load: A measure of overall physical exertion.\nPlayer Load per Minute: Total player load divided by minutes played.\nIMA Accel Total: Total number of acceleration movements across all intensity levels.\nIMA Decel Total: Total number of deceleration movements across all intensity levels.\nIMA Jump Count Low Band: Number of low-intensity jumps.\nIMA Jump Count Med Band: Number of medium-intensity jumps.\nIMA Jump Count High Band: Number of high-intensity jumps.\nExplosive Efforts: Total number of high-intensity accelerations, decelerations, and changes in direction.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Dictionary</span>"
    ]
  }
]