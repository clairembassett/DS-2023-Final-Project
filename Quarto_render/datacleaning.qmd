---
title: "Untitled"
format: html
---

# Cleaning the Dataset
```{python}
# importing libraries
import pandas as pd 

# loading the data set
df1 = pd.read_csv("./season1.csv")
df2 = pd.read_csv("./season2.csv")
``` 


### Deleting unused columns
```{python}
df1 = df1[['Date', 'About', 'Position', 'Period', 'Total Player Load', 'Player Load Per Minute', 'IMA Accel Total', 
           'IMA Decel Total', 'IMA Jump Count Low Band', 'IMA Jump Count Med Band', 'IMA Jump Count High Band', 'Explosive Efforts']]

df2 = df2[['Date', 'About', 'Position', 'Period', 'Total Player Load', 'Player Load Per Minute', 'IMA Accel Total', 
           'IMA Decel Total', 'IMA Jump Count Low Band', 'IMA Jump Count Med Band', 'IMA Jump Count High Band', 'Explosive Efforts']]

# make sure columns dropped properly
print("df1:", df1.columns)
print("df2:", df2.columns)
```

### Check for Missing Data
```{python}
# looking for missing values in the columns 
# loop through each column and print the percentage of missing values of each column
print("Season1 Missings:")
for col in df1.columns:
    total = len(df1)
    missing = df1[col].isnull().sum()
    percent = (missing / total) * 100
    print(col , ":", round(percent, 2))

print("\nSeason2 Missings:")
for col in df2.columns:
    total = len(df2)
    missing = df2[col].isnull().sum()
    percent = (missing / total) * 100
    print(col , ":", round(percent, 2))
```

### Check for Duplicated/Correct Data Types in df1
```{python}
# using .unique() to check for duplicates because of spaces/wrong data types/etc
# print(df1['Date'].unique() , "\n", df1['Date'].dtype) # -> all objects, no duplicates
# print(df1['About'].unique() , "\n", df1['About'].dtype) # -> all objects, no duplicates
print(df1['Position'].unique() , "\n", df1['Position'].dtype) # -> all objects, no duplicates
```

We see that there is one player whose name is not in the correct format of 'Athlete ..', so we will replace his name with 'Athlete K' per instructions.

``` {python}
df1['About'] = df1['About'].replace('Ben Vander Plas', 'Athlete K')
df1['About'].unique()

``` 

We only want to look at data for game-related observations, so we are only keeping rows where "Period 1" and "Period 2" are the `Period` type.

```{python}
# Period 1, Period 2
krows = []

for i in range(len(df1)):
    value = str(df1.loc[i, 'Period'])
    if 'Period 1' in value or 'Period 2' in value:
        krows.append(i)
df1 = df1.loc[krows].reset_index(drop=True)
```

Be more specific when dropping rows now, since some of the rows kept did include "Period 1", but were actually a Scrimmage Period 1, not a game.

```{python}
# delete rows with "Scrimmage"
drows = []

for i in range(len(df1)):
    value = str(df1.loc[i, 'Period'])
    if 'Scrimmage' in value:
        drows.append(i)
    if 'Drill' in value:
        drows.append(i)

df1.drop(index=drows, inplace=True)
df1.reset_index(drop=True, inplace=True)

df1['Period'].value_counts()
```

To finish cleaning the `Period` column, we are going to make sure that there are no duplicates in this column. Since some of these duplicates included a period number in the `Period` value, we will remove them to make them all merge into only two unique values.

```{python}
# Period 1 = 1, Period 2 = 2

# cleaning Period 1
if "2. Period 1" in df1['Period'].values:
    df1['Period'] = df1['Period'].replace("2. Period 1", "Period 1")
if "3. Period 1" in df1['Period'].values:
    df1['Period'] = df1['Period'].replace("3. Period 1", "Period 1")

# cleaning Period 2
if "2. Period 2" in df1['Period'].values:
    df1['Period'] = df1['Period'].replace("2. Period 2", "Period 2")
if "4. Period 2" in df1['Period'].values:
    df1['Period'] = df1['Period'].replace("4. Period 2", "Period 2")
if "3. Period 2" in df1['Period'].values:
    df1['Period'] = df1['Period'].replace("3. Period 2", "Period 2")

print(df1['Period'].value_counts())
```

Continuing to check the columns:

```{python}
# # print(df1['Total Player Load'].value_counts(), "\n", df1['Total Player Load'].dtype) # -> all floats
# # print(df1['Player Load Per Minute'].unique(), "\n", df1['Player Load Per Minute'].dtype) # -> all floats w/ one decimal place
# # print(df1['IMA Accel Total'].unique(), "\n", df1['IMA Accel Total'].dtype) # -> all ints, no duplicates
# # print(df1['IMA Decel Total'].unique(), "\n", df1['IMA Decel Total'].dtype) # -> all ints, no duplicates 
# print(df1['IMA Jump Count Low Band'].unique(), "\n", df1['IMA Jump Count Low Band'].dtype) # -> all ints, no duplicates
# print(df1['IMA Jump Count Med Band'].unique(), "\n", df1['IMA Jump Count Med Band'].dtype) # -> all ints, no duplicates
# print(df1['IMA Jump Count High Band'].unique(), "\n", df1['IMA Jump Count High Band'].dtype) # -> all ints, no duplicates
print(df1['Explosive Efforts'].unique(), "\n", df1['Explosive Efforts'].dtype) # -> all ints, no duplicates
```


### Check for Duplicates/Correct Data Types in df2:
Once again, we can use the .unique() and .value_counts() functions to check for duplicates that might be caused by spaces or change in data types.

```{python}
# print(df2['Date'].unique() , "\n", df2['Date'].dtype) # -> all objects, no duplicates
# print(df2['About'].unique() , "\n", df2['About'].dtype) # -> all objects, no duplicates
print(df2['Position'].unique() , "\n", df2['Position'].dtype) # -> all objects, no duplicates
```

We only want to look at data for game-related observations, so we are only keeping rows where "Period 1" and "Period 2" are the `Period` type.
```{python}
# Period 1, Period 2
krows = []

for i in range(len(df2)):
    value = str(df2.loc[i, 'Period'])
    if 'Period 1' in value or 'Period 2' in value:
        krows.append(i)
df2 = df2.loc[krows].reset_index(drop=True)
```

Be more specific when dropping rows now, since some of the rows kept did include "Period 1", but were actually a Scrimmage Period 1 not a game. 

```{python}
# delete rows with "Scrimmage"
drows = []

for i in range(len(df2)):
    value = str(df2.loc[i, 'Period'])
    if 'Scrimmage' in value:
        drows.append(i)
    if 'Drill' in value:
        drows.append(i)

df2.drop(index=drows, inplace=True)
df2.reset_index(drop=True, inplace=True)

df2['Period'].value_counts()
```

To finish cleaning the `Period` column, we are going to make sure that there are no duplicates in this column. Since some of these duplicates included a period number in the `Period` value, we will remove them to make them all merge into only two unique values. 
```{python}
# Period 1 = 1, Period 2 = 2

# cleaning Period 1
if "2. Period 1" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("2. Period 1", "Period 1")
if "3. Period 1" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("3. Period 1", "Period 1")
if "1. Period 1" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("1. Period 1", "Period 1")
if "8. Period 1" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("8. Period 1", "Period 1")

# cleaning Period 2
if "2. Period 2" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("2. Period 2", "Period 2")
if "4. Period 2" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("4. Period 2", "Period 2")
if "3. Period 2" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("3. Period 2", "Period 2")
if "5. Period 2" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("5. Period 2", "Period 2")
if "9. Period 2" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("9. Period 2", "Period 2")

else:
    df2['Period'] = df2['Period']

print(df2['Period'].value_counts())
```

Continuing to check the columns:

```{python}
# print(df2['Total Player Load'].value_counts(), "\n", df2['Total Player Load'].dtype) # -> all floats
# print(df2['Player Load Per Minute'].unique(), "\n", df2['Player Load Per Minute'].dtype) # -> all floats w/ one decimal place
# print(df2['IMA Accel Total'].unique(), "\n", df2['IMA Accel Total'].dtype) # -> all ints, no duplicates
# print(df2['IMA Decel Total'].unique(), "\n", df2['IMA Decel Total'].dtype) # -> all ints, no duplicates 
# print(df2['IMA Jump Count Low Band'].unique(), "\n", df2['IMA Jump Count Low Band'].dtype) # -> all ints, no duplicates
# print(df2['IMA Jump Count Med Band'].unique(), "\n", df2['IMA Jump Count Med Band'].dtype) # -> all ints, no duplicates
# print(df2['IMA Jump Count High Band'].unique(), "\n", df2['IMA Jump Count High Band'].dtype) # -> all ints, no duplicates
print(df2['Explosive Efforts'].unique(), "\n", df2['Explosive Efforts'].dtype) # -> all ints, no duplicates
```


For future use, like making our graphs and other analysis, we want to save the cleaned data sets as new csv files. 

```{python}
df1.to_csv("./season1_cleaned.csv", index=False)
df2.to_csv("./season2_cleaned.csv", index=False)
``` 