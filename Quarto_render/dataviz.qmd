---
title: "Data Visualization"
format: html
jupyter: python3
---

# Graph 1: Looking at the Percentages of Total Player Load separate by position, for each period

```{python}
# Importing libraries
import pandas as pd 
import matplotlib.pyplot as plt

# Loading in cleaned data set 
df1 = pd.read_csv("./season1_cleaned.csv")
``` 

To get the data ready for our pie charts, we need to separate the one dataframe by `Period` to make new two dataframes: p1 and p2. For the two new dataframes, we wil use the `groupby` method to group the data by `Position` and then find the average of the `Total Player Load` for each position. 
```{python}
# Separate df1 into dataframes for period 1 and for period 2
p1 = df1[df1['Period'] == 'Period 1'].copy().reset_index(drop=True)
p2 = df1[df1['Period'] == 'Period 2'].copy().reset_index(drop=True)

# Take average of `Total Player Load` by `Position` for each period dataframe
# Grouping by `Position`, then taking the mean of `Total Player Load`, then resetting the index 
p1_avg = p1.groupby(['Position'])['Total Player Load'].mean().reset_index()
p2_avg = p2.groupby(['Position'])['Total Player Load'].mean().reset_index()

# Print dataframes
print(p1_avg,"\n")
print(p2_avg)
``` 


Now3 that we have the averages, we will divide each position's `Total Player Load` by the sum of all positions' `Total Player Load` to get the percentage. This percentage will be stored in a new column, `Proportion`. 
```{python}
# Add a new column, Proportion, for each position's TPL for each period 
p1_avg['Proportion'] = p1_avg['Total Player Load'] / p1_avg['Total Player Load'].sum()
p2_avg['Proportion'] = p2_avg['Total Player Load'] / p2_avg['Total Player Load'].sum()

# Print dataframes w/ new column
print(p1_avg, "\n")
print(p2_avg)
``` 

To plot our donut charts, we will use the `plot.pie` method. Using subplots, we can create two donut charts side by side to demonstrate the percentages of `Total Player Load` for each position in each period. 
```{python}
# Make color dict for positions
colors = {'Guard': '#E57200', 'Forward': '#232D4B', 'Center': '#C8CBD2'}

# Make subplots, 1 row and 2 columns 
fig, ax = plt.subplots(1, 2, figsize=(9, 5))

# Graphing Period 1 as ax[0], aka first subplot 
# the wedgeprops argument is used to give the hole in the center, the autopct argument is used to display the percentages, the pctdistance argument is used to change the distance of the percentage text
# the textprops argument is used to change the font color and size, the startangle argument is used to rotate the chart, and the colors argument is used to change the colors of the wedges based on the position
ax[0].pie(p1_avg['Proportion'], labels=None, wedgeprops=dict(width=0.5), autopct='%1.1f%%', pctdistance=0.7, textprops={'color': 'white', 'fontsize': '12'}, startangle=90, colors=[colors[pos] for pos in p1_avg['Position']])
# the annotate argument is used to add text to the center of the donut chart
ax[0].annotate('Period 1', xy=(0, 0), fontsize=15, ha='center')

# Graphing Period 2 as ax[1], aka the second subplot
# the arguments are the same as above, but with data from p2_avg 
ax[1].pie(p2_avg['Proportion'], labels=None, wedgeprops=dict(width=0.5), autopct='%1.1f%%', pctdistance=0.7, textprops={'color': 'white', 'fontsize': '12'}, startangle=90, colors=[colors[pos] for pos in p2_avg['Position']])
ax[1].annotate('Period 2', xy=(0, 0), fontsize=15, ha='center')

# Adding a title 
fig.suptitle('Guards Contribute A Higher Proportion of the Total Player Load', fontsize=18)

# Adding a legend, and setting the location, font size, and position 
fig.legend(p1_avg['Position'], loc='center', bbox_to_anchor=(0.5, 0.8), title='Position', fontsize=12)

# Making a tight layout and displaying the plot
plt.tight_layout()
plt.show()
```

# Graph 2: Looking at Explosive efforts, ima accel/decels, and ima jump band counts (med, high, low)

```{python}
# Importing libraries for graph 2
from sklearn.preprocessing import StandardScaler
import matplotlib.dates as mdates
from matplotlib.patches import Patch
```

There must be setup in logistics like turning `Date` string from the dataset into a datetime structure and filtering the data just for that of Athlete H:
```{python}
# Obtain `Date` from df1 and turn into datetime object through pandas
df1['Date'] = pd.to_datetime(df1['Date'], format='%m/%d/%y')

# Not wanting to work straight on df1, I will create a copy of df1 to manipulate for this graph:
df1_copy = df1.copy()

# sort for just Athlete H (athlete in Season 1 with highest incline in player load)
df1_copy = df1_copy[df1_copy['About'] == 'Athlete H']
```

The three variables that will be looked at are the ones in the season1 dataset that relate to total player load. For this purpose, 3 variables will be chosen/combined in a meaningful way for the graph. Here they are:

1. **IATS_IDTS_pct** = `IMA Accel Total` and `IMA Decel Total` averaged
2. **Jumps_pct** = `IMA Jump Count Low Band`, `IMA Jump Count Med Band`, `IMA Jump Count High Band` averaged
3. **EES_pct** =`Explosive Efforts`

To find the proportions, all 3 main variables will be divided by the `Total Player Load` at the matching dates.
```{python}
# Avg_IATS_IDTS_By_Date is the average of the IMA Accel/Decel total. Having both independently on the graph causes busy-ness
# They're similar in correlation to total player load (found through EDA)
df1_copy['Avg_IATS_IDTS_By_Date'] = (
    df1_copy['IMA Accel Total'] + 
    df1_copy['IMA Decel Total']
    ) / 2
df1_copy['IATS_IDTS_pct'] = df1_copy['Avg_IATS_IDTS_By_Date'] / df1_copy['Total Player Load']

# Avg_ijclb_ijcmb_ijchb_By_Date is the average of the IMA jump bands from low, medium, and high. Having all independently on the graph causes busy-ness
# They're similar in correlation to total player load (found through EDA)
df1_copy['Avg_ijclb_ijcmb_ijchb_By_Date'] = (
    df1_copy['IMA Jump Count Low Band'] +
    df1_copy['IMA Jump Count Med Band'] +
    df1_copy['IMA Jump Count High Band']
    ) / 3
df1_copy['Jumps_pct'] = df1_copy['Avg_ijclb_ijcmb_ijchb_By_Date'] / df1_copy['Total Player Load']

# Explosive Efforts can remain independent since there's only one "version"
df1_copy['EES_pct'] = df1_copy['Explosive Efforts'] / df1_copy['Total Player Load']
```

```{python}
avg_df = df1_copy.groupby('Date')[[ 'IATS_IDTS_pct', 'EES_pct', 'Jumps_pct']].mean().reset_index()
avg_df.columns = ['Date',  'IATS_IDTS', 'EES', 'Jumps']

col_map = {
    'IATS_IDTS': '#232D4B',
    'EES': '#E57200',
    'Jumps': '#D3D3D3'
}


avg_df = avg_df.sort_values('Date')
x = range(len(avg_df))

plt.figure(figsize=(10, 5.8))

plt.axhspan(0, 1.0, color='#bcbcbc', zorder=0)  # soft ivory/sand

plt.stackplot(
    avg_df['Date'],
    avg_df['IATS_IDTS'],
    avg_df['EES'],
    avg_df['Jumps'],
    colors=['#232D4B', '#E57200', '#fbc902'],
    alpha=1
)


plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_visible(False)
plt.tick_params(axis='y', length=0)

handles = [
    Patch(facecolor='#D3D3D3'),  # Top layer in graph (Jumps)
    Patch(facecolor='#E57200'),  # Middle layer (EES)
    Patch(facecolor='#fbc902'),  # Bottom layer (IATS_IDTS)
]
labels = [
    'IMA Jump Band Counts',
    'Explosive Efforts',
    'IMA Accels & Decels'
]

# plt.legend(
#     handles=handles,
#     labels=labels,
#     loc="upper right",
#     bbox_to_anchor=(1, 1.2),
#     frameon=False,
#     fontsize=8
# )

plt.text(0.44, 1.23, 'IMA Acceleration/Deceleration', transform=plt.gca().transAxes, fontsize=13, color='#000080')
plt.text(0.097, 1.175, 'Explosive Efforts', transform=plt.gca().transAxes, fontsize=13, color='#E57200')
plt.text(0.308, 1.175, 'IMA Jump Bands', transform=plt.gca().transAxes, fontsize=13, color='#fbc902')



plt.xlabel('Game Dates')
plt.text(-0.009, 1.04, "(Cumulative Proportions of Total Player Load)", transform=plt.gca().transAxes)
plt.title("Total Player Load Contributors in Season 1 Games:                                                      contributes the most,\nfollowed by                               and                ", x=-0.01, y=1.15, loc='left')
plt.text(0, -0.15, 'Source: Season 1 data, Athlete H data', transform=plt.gca().transAxes)


plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=1)) 
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%b %d'))
plt.gca().xaxis.set_major_locator(mdates.AutoDateLocator())

plt.xlim(avg_df['Date'].min(), avg_df['Date'].max())

plt.tight_layout()

plt.show()
```