# Final Project - EDA

### Rebecca Vanni, Claire Bassett, Iliana Vasslides, Kayla Kim

##### Question One - Define Your Audience / Stakeholder

This report is made for the strength and training team for the men's basketball team at UVA. Specifically made in mind for Mike Curtis, who is the head of strength and conditioning.

##### Question Two - Define Your Problem Statement

Injuries plague every athlete team, especially as the season progresses. How does a players total acceleration, player load, and jumps effect their effort throughout the season? As the the season progresses how does a players load transform between different uses of exertion?

##### Question Three - Key Variables

Independent variable: "Date" or the time during the season the game was played, will be seperated by season (not including the practice dates) Dependent Variables: These will be measuring the amount of effort or exertion in a game... including("total accerlation efforts", Total Player Load", "Player Load per Minute", "IMA Accel Total", "IMA Decel Total", "IMA Jump", and the "Explosive Efforts")

We are also planning on studying how this varies by specific player throughout a season and by the average posistions. In order to find this we will use the "About" and "Position" columns.

##### Question Four - Merge & Clean the Dataset

To clean the data, we are deleting unused columns, checking for missing values, removing duplicates, and checking for correct data types.

###### Import all necessary libraries:

```{python}
import pandas as pd 
```

###### Load the data sets:

```{python}
df1 = pd.read_csv("./season1.csv")
df2 = pd.read_csv("./season2.csv")
```

###### Delete unused columns:

We only want to keep Date, About, Position, Period Number, Period, Total Player Load, Player Load Per Minute, IMA Accel Total, IMA Decel Total, IMA Jump Count Low Band, IMA Jump Count Med Band, IMA Jump Count High Band, and Explosive Efforts.

```{python}
df1 = df1[['Date', 'About', 'Position', 'Period Number', 'Period', 'Total Player Load', 'Player Load Per Minute', 'IMA Accel Total', 
           'IMA Decel Total', 'IMA Jump Count Low Band', 'IMA Jump Count Med Band', 'IMA Jump Count High Band', 'Explosive Efforts']]

df2 = df2[['Date', 'About', 'Position', 'Period Number', 'Period', 'Total Player Load', 'Player Load Per Minute', 'IMA Accel Total', 
           'IMA Decel Total', 'IMA Jump Count Low Band', 'IMA Jump Count Med Band', 'IMA Jump Count High Band', 'Explosive Efforts']]

# make sure columns dropped properly
print("df1:", df1.columns)
print("df2:", df2.columns)
```

###### Check for Missing Data:

We want to loop through each column and print out the percentage of missing values for each column.

```{python}
print("Season1 Missings:")
for col in df1.columns:
    total = len(df1)
    missing = df1[col].isnull().sum()
    percent = (missing / total) * 100
    print(col , ":", round(percent, 2))

print("\nSeason2 Missings:")
for col in df2.columns:
    total = len(df2)
    missing = df2[col].isnull().sum()
    percent = (missing / total) * 100
    print(col , ":", round(percent, 2))
```

###### Check for Duplicates/Correct Data Types in df1:

We can use the .unique() and .value_counts() functions to check for duplicates that might be caused by spaces or change in data types.

```{python}
# print(df1['Date'].unique() , "\n", df1['Date'].dtype) # -> all objects, no duplicates
# print(df1['About'].unique() , "\n", df1['About'].dtype) # -> all objects, no duplicates
print(df1['Position'].unique() , "\n", df1['Position'].dtype) # -> all objects, no duplicates
```

We only want to look at data for game-related observations, so we are only keeping rows where "Warm Up", "Period 1", "Period 2", and "Movement Prep" are the `Period` type.

```{python}
# Warm Up, Period 1, Period 2, Mvmt Prep, Movement Prep
krows = []

for i in range(len(df1)):
    value = str(df1.loc[i, 'Period'])
    if 'Warm Up' in value or 'Period 1' in value or 'Period 2' in value or 'Mvmt Prep' in value or 'Movement Prep' in value:
        krows.append(i)
df1 = df1.loc[krows].reset_index(drop=True)
df1['Period'] = df1['Period'].replace("Mvmt Prep", "Movement Prep")
```

Be more specific when dropping rows now, since some of the rows kept did include "Warm Up" or "Period 1", but were actually a Scrimmage Period 1 not a game. Same thing happened with some observations that were Drills with Warm Ups, etc.

```{python}
# delete rows with "Scrimmage"
drows = []

for i in range(len(df1)):
    value = str(df1.loc[i, 'Period'])
    if 'Scrimmage' in value:
        drows.append(i)
    if 'Drill' in value:
        drows.append(i)

df1.drop(index=drows, inplace=True)
df1.reset_index(drop=True, inplace=True)

df1['Period'].value_counts()
```

To finish cleaning the `Period` column, we are going to make sure that there are no duplicates in this column. Since some of these duplicates had different period numbers, we have to make sure we change the period numbers to match as well.

```{python}
# Warm Up = 1 , Period 1 = 2, Period 2 = 3, Movement Prep = 4
# cleaning Warm Up
if "1. Warm Up" in df1['Period'].values:
    df1['Period'] = df1['Period'].replace("1. Warm Up", "Warm Up")
if "2. Warm Up" in df1['Period'].values:
    df1['Period'] = df1['Period'].replace("2. Warm Up", "Warm Up")
    df1['Period Number'] = df1['Period Number'].replace(2, 1)
if "7. Warm Up" in df1['Period'].values:
    df1['Period'] = df1['Period'].replace("7. Warm Up", "Warm Up")
    df1['Period Number'] = df1['Period Number'].replace(7, 1)

# cleaning Period 1
if "2. Period 1" in df1['Period'].values:
    df1['Period'] = df1['Period'].replace("2. Period 1", "Period 1")
if "3. Period 1" in df1['Period'].values:
    df1['Period'] = df1['Period'].replace("3. Period 1", "Period 1")
    df1['Period Number'] =df1['Period Number'].replace(3, 2)

# cleaning Period 2
if "2. Period 2" in df1['Period'].values:
    df1['Period'] = df1['Period'].replace("2. Period 2", "Period 2")
    df1['Period Number'] = df1['Period Number'].replace(2, 3)
if "4. Period 2" in df1['Period'].values:
    df1['Period'] = df1['Period'].replace("4. Period 2", "Period 2")
    df1['Period Number'] = df1['Period Number'].replace(4, 3)
if "3. Period 2" in df1['Period'].values:
    df1['Period'] = df1['Period'].replace("3. Period 2", "Period 2")
    
# cleaning Movement Prep
if "1. Mvmt Prep" in df1['Period'].values:
    df1['Period'] = df1['Period'].replace("1. Mvmt Prep", "Movement Prep")
    df1['Period Number'] = df1['Period Number'].replace(1, 4)
if "2. Mvmt Prep" in df1['Period'].values:
    df1['Period'] = df1['Period'].replace("2. Mvmt Prep", "Movement Prep")
    df1['Period Number'] = df1['Period Number'].replace(2, 4)
if "1. Movement Prep" in df1['Period'].values:
    df1['Period'] = df1['Period'].replace("1. Movement Prep", "Movement Prep")
    df1['Period Number'] = df1['Period Number'].replace(1, 4) 
if "2. Movement Prep" in df1['Period'].values:
    df1['Period'] = df1['Period'].replace("2. Movement Prep", "Movement Prep")
    df1['Period Number'] = df1['Period Number'].replace(2,4)
else:
    df1['Period'] = df1['Period']

print(df1['Period'].value_counts())
```

Continuing to check the columns:

```{python}
# # print(df1['Total Player Load'].value_counts(), "\n", df1['Total Player Load'].dtype) # -> all floats
# # print(df1['Player Load Per Minute'].unique(), "\n", df1['Player Load Per Minute'].dtype) # -> all floats w/ one decimal place
# # print(df1['IMA Accel Total'].unique(), "\n", df1['IMA Accel Total'].dtype) # -> all ints, no duplicates
# # print(df1['IMA Decel Total'].unique(), "\n", df1['IMA Decel Total'].dtype) # -> all ints, no duplicates 
# print(df1['IMA Jump Count Low Band'].unique(), "\n", df1['IMA Jump Count Low Band'].dtype) # -> all ints, no duplicates
# print(df1['IMA Jump Count Med Band'].unique(), "\n", df1['IMA Jump Count Med Band'].dtype) # -> all ints, no duplicates
# print(df1['IMA Jump Count High Band'].unique(), "\n", df1['IMA Jump Count High Band'].dtype) # -> all ints, no duplicates
print(df1['Explosive Efforts'].unique(), "\n", df1['Explosive Efforts'].dtype) # -> all ints, no duplicates
```

###### Check for Duplicates/Correct Data Types in df2:

Once again, we can use the .unique() and .value_counts() functions to check for duplicates that might be caused by spaces or change in data types.

```{python}
# print(df2['Date'].unique() , "\n", df2['Date'].dtype) # -> all objects, no duplicates
# print(df2['About'].unique() , "\n", df2['About'].dtype) # -> all objects, no duplicates
print(df2['Position'].unique() , "\n", df2['Position'].dtype) # -> all objects, no duplicates
```

We only want to look at data for game-related observations, so we are only keeping rows where "Warm Up", "Period 1", "Period 2", and "Movement Prep" are the `Period` type.

```{python}
# Warm Up, Period 1, Period 2, Mvmt Prep, Movement Prep
krows = []

for i in range(len(df2)):
    value = str(df2.loc[i, 'Period'])
    if 'Warm Up' in value or 'Period 1' in value or 'Period 2' in value or 'Mvmt Prep' in value or 'Movement Prep' in value:
        krows.append(i)
df2 = df2.loc[krows].reset_index(drop=True)
df2['Period'] = df2['Period'].replace("Mvmt Prep", "Movement Prep")
```

Be more specific when dropping rows now, since some of the rows kept did include "Warm Up" or "Period 1", but were actually a Scrimmage Period 1 not a game. Same thing happened with some observations that were Drills with Warm Ups, etc.

```{python}
# delete rows with "Scrimmage"
drows = []

for i in range(len(df2)):
    value = str(df2.loc[i, 'Period'])
    if 'Scrimmage' in value:
        drows.append(i)
    if 'Drill' in value:
        drows.append(i)

df2.drop(index=drows, inplace=True)
df2.reset_index(drop=True, inplace=True)

df2['Period'].value_counts()
```

To finish cleaning the `Period` column, we are going to make sure that there are no duplicates in this column. Since some of these duplicates had different period numbers, we have to make sure we change the period numbers to match as well. To finish cleaning the `Period` column, we are going to make sure that there are no duplicates in this column. Since some of these duplicates had different period numbers, we have to make sure we change the period numbers to match as well.

```{python}
# Warm Up = 1 , Period 1 = 2, Period 2 = 3, Movement Prep = 4
# cleaning Warm Up
if "1. Warm Up" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("1. Warm Up", "Warm Up")
if "2. Warm Up" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("2. Warm Up", "Warm Up")
    df2['Period Number'] = df2['Period Number'].replace(2, 1)
if "4. Warm Up" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("4. Warm Up", "Warm Up")
    df2['Period Number'] = df2['Period Number'].replace(4, 1)
if "3. Warm Up" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("3. Warm Up", "Warm Up")
    df2['Period Number'] = df2['Period Number'].replace(3, 1)

# cleaning Period 1
if "2. Period 1" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("2. Period 1", "Period 1")
if "3. Period 1" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("3. Period 1", "Period 1")
    df2['Period Number'] =df2['Period Number'].replace(3, 2)
if "1. Period 1" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("1. Period 1", "Period 1")
    df2['Period Number'] =df2['Period Number'].replace(1, 2)
if "8. Period 1" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("8. Period 1", "Period 1")
    df2['Period Number'] =df2['Period Number'].replace(8, 2)

# cleaning Period 2
if "2. Period 2" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("2. Period 2", "Period 2")
    df2['Period Number'] = df2['Period Number'].replace(2, 3)
if "4. Period 2" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("4. Period 2", "Period 2")
    df2['Period Number'] = df2['Period Number'].replace(4, 3)
if "3. Period 2" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("3. Period 2", "Period 2")
if "5. Period 2" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("5. Period 2", "Period 2")
    df2['Period Number'] = df2['Period Number'].replace(5, 3)
if "9. Period 2" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("9. Period 2", "Period 2")
    df2['Period Number'] = df2['Period Number'].replace(9, 3)
    
# cleaning Movement Prep
if "1. Movement Prep" in df2['Period'].values:
    df2['Period'] = df2['Period'].replace("1. Movement Prep", "Movement Prep")
    df2['Period Number'] = df2['Period Number'].replace(1, 4)

else:
    df2['Period'] = df2['Period']

print(df2['Period'].value_counts())
```

Continuing to check the columns:

```{python}
# print(df2['Total Player Load'].value_counts(), "\n", df2['Total Player Load'].dtype) # -> all floats
# print(df2['Player Load Per Minute'].unique(), "\n", df2['Player Load Per Minute'].dtype) # -> all floats w/ one decimal place
# print(df2['IMA Accel Total'].unique(), "\n", df2['IMA Accel Total'].dtype) # -> all ints, no duplicates
# print(df2['IMA Decel Total'].unique(), "\n", df2['IMA Decel Total'].dtype) # -> all ints, no duplicates 
# print(df2['IMA Jump Count Low Band'].unique(), "\n", df2['IMA Jump Count Low Band'].dtype) # -> all ints, no duplicates
# print(df2['IMA Jump Count Med Band'].unique(), "\n", df2['IMA Jump Count Med Band'].dtype) # -> all ints, no duplicates
# print(df2['IMA Jump Count High Band'].unique(), "\n", df2['IMA Jump Count High Band'].dtype) # -> all ints, no duplicates
print(df2['Explosive Efforts'].unique(), "\n", df2['Explosive Efforts'].dtype) # -> all ints, no duplicates
```